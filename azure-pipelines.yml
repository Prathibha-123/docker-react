# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '071cee55-ea33-45b5-a9fe-c3b5a1080d44'
  imageRepository: 'prathibhadockerreact'
  containerRegistry: 'testacr646.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'ReactLatest'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: owaspzap@1
      inputs:
        threshold: '1550'
        scantype: 'targetedScan'
        url: 'http://20.253.48.78'
    - bash: |
          sudo npm install -g handlebars-cmd
          cat <<EOF > owaspzap/nunit-template.hbs
          {{#each site}}
          <test-run
              id="2"
              name="Owasp test"
              start-time="{{../[@generated]}}"  >
              <test-suite
                  id="{{@index}}"
                  type="Assembly"
                  name="{{[@name]}}"
                  result="Failed"
                  failed="{{alerts.length}}">
                  <attachments>
                      <attachment>
                          <filePath>owaspzap/report.html</filePath>
                      </attachment>
                  </attachments>
              {{#each alerts}}<test-case
                  id="{{@index}}"
                  name="{{alert}}"
                  result="Failed"
                  fullname="{{alert}}"
                  time="1">
                      <failure>
                          <message>
                              <![CDATA[{{{desc}}}]]>
                          </message>
                          <stack-trace>
                              <![CDATA[
          Solution:
          {{{solution}}}
          Reference:
          {{{reference}}}
          instances:{{#each instances}}
          * {{uri}}
              - {{method}}
              {{#if evidence}}- {{{evidence}}}{{/if}}
                              {{/each}}]]>
                          </stack-trace>
                      </failure>
              </test-case>
              {{/each}}
              </test-suite>
          </test-run>
          {{/each}}
          EOF
      displayName: 'owasp nunit template'
      condition: always()
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd owaspzap
          ls
          pwd
    
    
    - bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
      displayName: 'generate nunit type file'
      condition: always()
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd owaspzap
          cat test-results.xml
    
    - task: PublishTestResults@2
      displayName: 'Publish Test Results **/TEST-*.xml'
      inputs:
        testResultsFormat: NUnit
        testResultsFiles: 'owaspzap/test-results.xml'
      condition: always()






